---
title: "problem2"
format: html
editor: visual
---

# Load Packages

```{r}
library("DESeq2")
library("gplots")
library("RColorBrewer")
library("genefilter")
```

# Load Data

```{r}
sampleInfo = read.table("/Users/kaylaly/Downloads/shortRNAseq.txt", header = T)
sampleInfo$FullSampleName = as.character(sampleInfo$FullSampleName)
```

# DESeq Analysis

```{r}
## I am assuming feature counts finished
countdata = read.table("fly_counts.txt", header=TRUE, row.names=1)
# Remove first five columns (chr, start, end, strand, length)
# or do it the tidy way
countdata = countdata[ ,6:ncol(countdata)]
# Remove crap from colnames in countdata
temp = colnames(countdata)
temp = gsub("RNAseq.bam.","",temp)
temp = gsub(".bam","",temp)
colnames(countdata) = temp

##  does everything match up...
cbind(temp,sampleInfo$FullSampleName,temp == sampleInfo$FullSampleName)

# create DEseq2 object & run DEseq
dds = DESeqDataSetFromMatrix(countData=countdata, colData=sampleInfo, design=~TissueCode)
dds <- DESeq(dds)
res <- results(dds)
res

plotMA( res, ylim = c(-1, 1) )
plotDispEsts(dds)
hist( res$pvalue, breaks=20, col="grey" )
###  throw out lowly expressed genes?? ... I leave this as an exercise
###  add external annotation to "gene ids"
# log transform
rld = rlog( dds )
## this is where you could just extract the log transformed normalized data for each sample ID, and then roll your own analysis
head( assay(rld) )
mydata = assay(rld)

sampleDists = dist(t(assay(rld)))
# heat map
sampleDistMatrix = as.matrix( sampleDists )
rownames(sampleDistMatrix) = rld$TissueCode
colnames(sampleDistMatrix) = NULL

colours = colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
heatmap.2( sampleDistMatrix, trace="none", col=colours)
# PCs
# wow you can sure tell tissue apart
print(plotPCA(rld, intgroup = "TissueCode"))
# heat map with gene clustering

# these are the top genes (that tell tissue apart no doubt)
topVarGenes <- head( order( rowVars( assay(rld) ), decreasing=TRUE ), 35 )
heatmap.2( assay(rld)[ topVarGenes, ], scale="row", trace="none", dendrogram="column", col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255))
```

## Volcano Plot Exercise

```{r}
# volcano plot this is an exercise
res_data = as.data.frame(res)
res_data$color = "gray" 
res_data$color[res_data$log2FoldChange > 1 & res_data$padj < 0.05] = "red"
res_data$color[res_data$log2FoldChange < -1 & res_data$padj < 0.05] = "blue"

# Volcano plot using adjusted p-value (padj)
ggplot(res_data, aes(x = log2FoldChange, y = -log10(padj), color = color)) +
  geom_point(alpha = 0.5, size = 1.5) +
  scale_color_manual(values = c("blue", "gray", "red")) +
  theme_minimal() +
  theme(legend.position = "none")
```
