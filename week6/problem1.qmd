---
title: "week6_problem1"
format: html
editor: visual
---

# Downloading Packages

```{r}
install.packages("tidyverse")
install.packages("BiocManager")
BiocManager::install("ATACseqQC")
BiocManager::install("DESeq2")
BiocManager::install("GO.db")
```

# Loading libraries

```{r}
library("ATACseqQC")
library("Rsamtools")
```

# Distribution of Fragment Lengths 

A5_ED_1

```{r}
bamfile = "/Users/kaylaly/Downloads/A5_ED_1.ATAC.chrX.dedup.bam"
bamfile.labels = gsub(".bam", "", basename(bamfile))
fragSize = fragSizeDist(bamfile, bamfile.labels)

estimateLibComplexity(readsDupFreq(bamfile, index=bamfile))
```

A5_WD_1

```{r}
bamfile = "/Users/kaylaly/Downloads/A5_WD_1.ATAC.chrX.dedup.bam"
bamfile.labels = gsub(".bam", "", basename(bamfile))
fragSize = fragSizeDist(bamfile, bamfile.labels)

estimateLibComplexity(readsDupFreq(bamfile, index=bamfile))
```

A6_ED_1

```{r}
bamfile = "/Users/kaylaly/Downloads/A6_ED_1.ATAC.chrX.dedup.bam"
bamfile.labels = gsub(".bam", "", basename(bamfile))
fragSize = fragSizeDist(bamfile, bamfile.labels)

estimateLibComplexity(readsDupFreq(bamfile, index=bamfile))
```

A6_WD_1

```{r}
bamfile = "/Users/kaylaly/Downloads/A6_WD_1.ATAC.chrX.dedup.bam"
bamfile.labels = gsub(".bam", "", basename(bamfile))
fragSize = fragSizeDist(bamfile, bamfile.labels)

estimateLibComplexity(readsDupFreq(bamfile, index=bamfile))
```

A7_ED_1

```{r}
bamfile = "/Users/kaylaly/Downloads/A7_ED_1.ATAC.chrX.dedup.bam"
bamfile.labels = gsub(".bam", "", basename(bamfile))
fragSize = fragSizeDist(bamfile, bamfile.labels)

estimateLibComplexity(readsDupFreq(bamfile, index=bamfile))
```

A7_WD_1

```{r}
bamfile = "/Users/kaylaly/Downloads/A7_WD_1.ATAC.chrX.dedup.bam"
bamfile.labels = gsub(".bam", "", basename(bamfile))
fragSize = fragSizeDist(bamfile, bamfile.labels)

estimateLibComplexity(readsDupFreq(bamfile, index=bamfile))
```

# Adjust reads for TN5 offsets 

**Now we want to adjust the reads for TN5 offsets. The way the TN5 adaptor sequencing primers work relative to reads, means the actual position the TN5 cut the DNA is offset relative to the start of the reads (depending on which strand it maps to). These corrections would not need to be carried out for other methods like DNAase1-HS-seq.**

A5_ED_1 (moving forward)

```{r}
bamfile = "/Users/kaylaly/Downloads/A5_ED_1.ATAC.chrX.dedup.bam"

outPath = "splited"
dir.create(outPath)

gal = readBamFile(bamfile, asMates=TRUE, bigFile=TRUE)
gal1 = shiftGAlignmentsList(gal)
shiftedBamfile = file.path(outPath, "shifted.bam")

library(BiocIO)
export(gal1, shiftedBamfile)
```

# Split bams into bins

Split bams by fragment size (nucleosome-free, mono, di, etc.)

```{r}
BiocManager::install("TxDb.Dmelanogaster.UCSC.dm6.ensGene")
library(TxDb.Dmelanogaster.UCSC.dm6.ensGene)
txs = transcripts(TxDb.Dmelanogaster.UCSC.dm6.ensGene)
TSS = promoters(txs, upstream=0, downstream=1)
TSS = unique(TSS)
objs = splitGAlignmentsByCut(gal1, txs = txs, outPath = outPath)
null = writeListOfGAlignments(objs, outPath)

## list the files generated by splitBam.
dir(outPath)
```

# Calculate signal near TSS

Nucleosome-free vs. mononucleosome

```{r}
bamfiles = file.path(outPath, c("NucleosomeFree.bam","mononucleosome.bam","dinucleosome.bam","trinucleosome.bam"))
# estimate the library size for normalization
library(ChIPpeakAnno)
librarySize = estLibSize(bamfiles)
# Only consider these chromosomes (pick one for speed/memory)
seqlev = "chrX"
# seqlev = c("chrX","chr2L","chr2R","chr3L","chr3R")
NTILE = 101
dws = ups = 1010
sigs = enrichedFragments(bamfiles, TSS=TSS, librarySize=librarySize, seqlev=seqlev,
       TSS.filter=0.5, n.tile = NTILE, upstream = ups, downstream = dws)

## log2 transformed signals
names(sigs) <- gsub(".bam", "", basename(names(sigs)))
sigs.log2 <- lapply(sigs, function(.ele) log2(.ele+1))
#plot heatmap
featureAlignedHeatmap(sigs.log2, reCenterPeaks(TSS, width=ups+dws), zeroAt=.5, n.tile=NTILE)
```
